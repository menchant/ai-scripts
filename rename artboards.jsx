#include ".scripts/polyfills.jsx"#include ".scripts/underscore.jsx"// convert artboard dimensions into a sane coordinate spacevar artboards = [];_.each(app.activeDocument.artboards, function(ab) {    // ignore artboards when the name starts with "-"    if (ab.name.charAt(0) == '-') return;    var r = ab.artboardRect;    artboards.push({        ab: ab,        left: r[0],        top: r[1] * -1,        right: r[2],        bottom: r[3] * -1,        width: r[2] - r[0],        height: (r[3] - r[1]) * -1,        area: (r[2] - r[0]) * (r[3] - r[1]) * -1    });});// group artboards with same dimensionsvar artboards_by_size = {};_.each(artboards, function(ab) {    var size_id = Math.round(ab.width) + '-' + Math.round(ab.height);    if (!artboards_by_size[size_id]) artboards_by_size[size_id] = [];    artboards_by_size[size_id].push(ab);});// sort artboard sizes by area small – largevar sizes = _.keys(artboards_by_size).sort(function(a,b) {    return artboards_by_size[a][0].area - artboards_by_size[b][0].area;});var size_names = ['app', 'mobile', 'desktop'];if (sizes.length == 2) size_names = size_names.slice(1);_.each(sizes, function(size_id, i) {    var size_name = size_names[i];    var artboards = artboards_by_size[size_id];        // find top edge of artboards    var min_y = 9e9;    _.each(artboards, function(ab) { min_y = Math.min(min_y, ab.top); });    // compute rounded vertical position    _.each(artboards, function(ab) {        ab.top_rnd = Math.round(((ab.top - min_y) / ab.height) * 2);    });    // sort artboards, top to bottom, left to right    artboards = artboards.sort(function byLeft(a,b) {        if (a.top_rnd != b.top_rnd) return a.top_rnd - b.top_rnd;        return a.left - b.left;    });    _.each(artboards, function(ab, i) {        ab.ab.name = 'slide-' + (i+1) + '-' + size_name;     });});