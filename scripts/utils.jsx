// helper-functions// indexOf polyfill from https://gist.github.com/atk/1034425[].indexOf||(Array.prototype.indexOf=function(a,b,c){for(c=this.length,b=(c+~~b)%c;b<c&&(!(b in this)||this[b]!==a);b++);return b^c?b:-1;});// http://samuelmullen.com/2012/03/left-pad-zeroes-in-javascript/function zeroPad(value, padding) {	var zeroes = "0";	for (var i = 0; i < padding; i++) { zeroes += "0"; }	return (zeroes + value).slice(padding * -1);}Array.prototype.findUniqueValues = function() {	var o = {}, i, l = this.length, r = [];	for(i=0; i<l;i+=1) o[this[i]] = this[i];	for(i in o) r.push(o[i]);	return r;}function cleanText(text) {	for (var i=0; i < htmlCharacterCodes.length; i++) {		var charCode = htmlCharacterCodes[i];		text = text.replace( new RegExp(htmlCharacterCodes[i][0],'g'), htmlCharacterCodes[i][1] )	};	return text;}function straightenCurlyQuotesInsideAngleBrackets(text) {	// thanks to jashkenas	var tagFinder = /<[^\n]+?>/g;	var quoteFinder = /[“‘’”]([^\n]*?)[“‘’”]/g;	return text.replace(tagFinder, function(tag){		return tag.replace( /[“”]/g , '"' ).replace( /[‘’]/g , "'" );	});}function isEmpty(str) {	return (!str || 0 === str.length);}function isBlank (str) {	return (!str || /^\s*$/.test(str));}function makeKeyword(text) {	// text = text.replace( /[^A-Za-z0-9_\-]/g , "_" ).toLowerCase();	text = text.replace( /[^A-Za-z0-9_\-]/g , "_" );	return text;}function readFile(inputFile,starterText,linePrefix,lineSuffix) {	var outputText = starterText || '';    linePrefix = linePrefix || '';    lineSuffix = lineSuffix || '';	if ( inputFile.exists ) {		inputFile.open("r");		while(!inputFile.eof) {			outputText += linePrefix + inputFile.readln() + lineSuffix;		};		inputFile.close();	} else {		errors.push(inputFile + " could not be found.");	};	return outputText;}// ================================================// Progress bar// ================================================function progressBar() {  this.win = null;}progressBar.prototype.init = function() {  var min=0, max=100;  var win = new Window("palette", "Ai2html progress", [150, 150, 600, 260]);  this.win = win;  win.pnl = win.add("panel", [10, 10, 440, 100], "Progress");  win.pnl.progBar      = win.pnl.add("progressbar", [20, 35, 410, 60], min, max);  win.pnl.progBarLabel = win.pnl.add("statictext", [20, 20, 320, 35], min+"%");  win.show();  return true;}progressBar.prototype.setProgress = function(progress) {  var win = this.win;  var max = win.pnl.progBar.maxvalue,      min = win.pnl.progBar.minvalue;  // progress is always 0.0 to 1.0  var pct = progress * max;  win.pnl.progBar.value = pct;  this.setLabel();  win.update();}progressBar.prototype.getProgress = function() {  var win = this.win;  var max = win.pnl.progBar.maxvalue,      min = win.pnl.progBar.minvalue;  return this.win.pnl.progBar.value/max;}progressBar.prototype.setLabel = function() {  this.win.pnl.progBarLabel.text = Math.round(this.win.pnl.progBar.value) + "%";}progressBar.prototype.setTitle = function(title) {  this.win.pnl.text = title;  this.win.update();}progressBar.prototype.increment = function(amount) {  var amount = amount || 0.01;  var win = this.win;  this.setProgress(this.getProgress()+amount);  win.update();}progressBar.prototype.close = function() {	this.win.update();	this.win.close();}